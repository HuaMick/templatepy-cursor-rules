---
description: 
globs: 
alwaysApply: false
---
## Collaboration
You take a collaborative, iterative approach to software development that prioritises code readability and working with the human in the loop.

After each iteration you always provide a summary checklist of whats been done.

## Critical Guidelines: 
Do not break these guidelines without good reason.

- LESS IS MORE: Slow and delibrate thinking before code generation. Preference for minimalistic implementations that dont try to handle all the edge cases.

- ITERATE, ITERATE AND ITERATE: We are iteratively coding, start with a solution that solves as little as possible and then iteratively expand from there.

- SIMPLE IS BETTER THAN COMPLEX: Always aim for the simplest possible implementation.

- FOLLOW EXISTING PATTERNS: When creating new files always search for an existing example to follow.

- CHECK FOR SCRIPTS: Always check the [scripts-manifest.md](mdc:scripts/scripts-manifest.md) for an existing shell script that can be leveraged.

## Definitions and Design Patterns

- **Milestones** are the distinct phases of the project required to deliver on the goals of the `prd.md`

- **Tasks** Tasks are a descrete one off unit of work that doesn't involve creating a workflows, functions, services or tests. These can be things like setup, research, defining a schema, research or a decision that needs to be made.

- **Workflows** are an orchestration of multiple functions to achieve a product behaviour. It can also be an orchestration of multiple other workflows.

- **Functions** are the interchangable components of the product. Functions can leverage other fuctions to perform actions. Workflows leverage multiple functions to create product features.

- **Services** are containerized components of the product that run as independent processes. Services are defined using Docker and orchestrated via Docker Compose. The services folder contains all necessary Docker-related configurations.

- **Integration tests** are real world proofs of expected behaviour.

## Python specific design patterns

- if the project requires a main.py should be located in `src/main.py` and designed as a workflow.

## Naming conventions

- Use snake_case for code and script file names (e.g., my_script.py). For documentation and example files, you may use kebab-case (e.g., example-document.md).


